
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label, Toplevel, StringVar, IntVar, Checkbutton, messagebox
from datetime import datetime



OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"/Users/samiyafyffe/Secure-Endpoint-Revamp/generated_output/build/assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

file_path_var = StringVar()

''' 
Tracks checkbox states: 1 = checked, 0 = unchecked 
'''
single_file_var = IntVar(value=0)
directory_var = IntVar(value=0)
processes_var = IntVar()
files_var = IntVar()
extensions_var = IntVar()
paths_var = IntVar()


window.geometry("674x408")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 408,
    width = 674,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    1.0,
    0.0,
    371.0,
    408.0,
    fill="#0489BA",
    outline="")

canvas.create_rectangle(
    1.0,
    0.0,
    675.0,
    424.0,
    fill="#E6F5FB",
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    374.0,
    408.0,
    fill="#0489BA",
    outline="")

canvas.create_text(
    429.0,
    39.0,
    anchor="nw",
    #text="Diagnostic Analyzer",
    fill="#242424",
    font=("CiscoSansTT Bold", 20 * -1)
)

canvas.create_text(
    393.0,
    86.0,
    anchor="nw",
    text="Input Selection",
    fill="#242424",
    font=("CiscoSansTT", 15 * -1)
)

canvas.create_text(
    390.0,
    181.0,
    anchor="nw",
    text="Analysis Options",
    fill="#242424",
    font=("CiscoSansTT", 15 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_1 clicked"),
    relief="flat"
)
button_1.place(
    x=483.0,
    y=360.0,
    width=82.0,
    height=25.0
)

canvas.create_text(
    90.0,
    52.0,
    anchor="nw",
    text="Welcome",
    fill="#FFFFFF",
    font=("CiscoSansTT Bold", 40 * -1)
)

def browse_file():
    from tkinter import filedialog
    global selected_file_path
    selected_file_path = filedialog.askopenfilename(
        title="Select Diagnostic File",
        filetypes=[("Compressed Files", "*.zip *.7z"), ("All Files", "*.*")]
    )
    if selected_file_path:
        print(f"Selected file: {selected_file_path}")
        file_path_var.set(selected_file_path)

def clear_checkboxes():
    processes_var.set(0)
    files_var.set(0)
    extensions_var.set(0)
    paths_var.set(0)
    single_file_var.set(0)
    directory_var.set(0)


button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=browse_file,
    relief="flat"
)
button_2.place(
    x=391.0,
    y=118.0,
    width=53.0,
    height=16.0
)

canvas.create_rectangle(
    468.0,
    119.0,
    659.0,
    135.0,
    fill="#D9D9D9",
    outline="")

single_file_cb = Checkbutton(
    window,
    variable=single_file_var,
    text="Single File",
    bg="#E6F5FB",  
    fg="#242424",
    font=("CiscoSans", 12),
    relief="flat",
    highlightthickness=0,
    bd=0,
    activebackground="#E6F5FB",
    cursor="hand2"
)
single_file_cb.place(x=417, y=150)  

directory_cb = Checkbutton(
    window,
    variable=directory_var,
    text="Directory",
    bg="#E6F5FB",
    fg="#242424",
    font=("CiscoSans", 12),
    relief="flat",
    highlightthickness=0,
    bd=0,
    activebackground="#E6F5FB",
    cursor="hand2"
)
directory_cb.place(x=550, y=150)

file_path_entry = Entry(
    window,
    textvariable=file_path_var,
    bd=0,
    bg="#D9D9D9",
    fg="#000000",
    highlightthickness=0,
    font=("CiscoSans", 10)
)

file_path_entry.place(
    x=470.0,
    y=120.0,
    width=185.0,
    height=15.0
)

# Checkbox for Processes
processes_cb = Checkbutton(
    window,
    text="Processes",
    variable=processes_var,
    bg="#E6F5FB",
    fg="#242424",
    font=("CiscoSansTT Medium", 12),
    relief="flat",
    highlightthickness=0,
    bd=0,
    activebackground="#E6F5FB",
    cursor="hand2"
)
processes_cb.place(x=570, y=215)

# Checkbox for Files
files_cb = Checkbutton(
    window,
    text="Files",
    variable=files_var,
    bg="#E6F5FB",
    fg="#242424",
    font=("CiscoSansTT Medium", 12),
    relief="flat",
    highlightthickness=0,
    bd=0,
    activebackground="#E6F5FB",
    cursor="hand2"
)
files_cb.place(x=570, y=237)

# Checkbox for Extensions
extensions_cb = Checkbutton(
    window,
    text="Extensions",
    variable=extensions_var,
    bg="#E6F5FB",
    fg="#242424",
    font=("CiscoSansTT Medium", 12),
    relief="flat",
    highlightthickness=0,
    bd=0,
    activebackground="#E6F5FB",
    cursor="hand2"
)
extensions_cb.place(x=570, y=262)

# Checkbox for Paths
paths_cb = Checkbutton(
    window,
    text="Paths",
    variable=paths_var,
    bg="#E6F5FB",
    fg="#242424",
    font=("CiscoSansTT Medium", 12),
    relief="flat",
    highlightthickness=0,
    bd=0,
    activebackground="#E6F5FB", 
    cursor="hand2"
)
paths_cb.place(x=570, y=287)

# Add code
start_time_var = StringVar()

def open_start_time_popup():
    popup = Toplevel(window)
    popup.title("Enter Start Time")
    popup.geometry("300x100")
    popup.resizable(False, False)

    Label(popup, text="(YYYY-MM-DD HH:MM:SS):").pack(pady=5)
    time_var = StringVar()
    entry = Entry(popup, textvariable=time_var, width=25)
    entry.pack(pady=5)
    entry.focus_set()

    def submit():
        user_time = time_var.get().strip()
        try:
            datetime.strptime(user_time, "%Y-%m-%d %H:%M:%S")
            start_time_var.set(user_time)  # Save to global var
            start_time_label.config(text=f"Start Time: {user_time}")
            popup.destroy()
        except ValueError:
            messagebox.showerror("Invalid Format", "Please enter time as YYYY-MM-DD HH:MM:SS")

    submit_btn = Button(popup, text="Submit", command=submit)
    submit_btn.pack(pady=5)

start_time_label = Label(
    window,
    text="Set Start Time",
    bg="#D9D9D9",
    fg="#242424",
    font=("CiscoSans", 10),
    cursor="hand2"
)
start_time_label.place(x=390, y=208, width=110, height=20)

start_time_label.bind("<Button-1>", lambda e: open_start_time_popup())

button_image_9 = PhotoImage(
    file=relative_to_assets("button_9.png")
)

button_9 = Button(
    image=button_image_9,
    borderwidth=0,
    highlightthickness=0,
    command=clear_checkboxes,  #clear checkboxes when clicked
    relief="flat"
)

button_9.place(
    x=605.0,
    y=328.0,
    width=50,
    height=14
)


canvas.create_text(
    34.0,
    132.0,
    anchor="nw",
    text=(
        "This tool has been built to analyze diagnostic files. Simply select your diagnostic file "
        "(either .7z or .zip), choose your analysis preferences like time filtering and which elements "
        "to track, and let the analyzer do the work.\n\n"
        "Note: For best results, ensure your diagnostic files are complete and unmodified.\n"
    ),
    fill="#FFFFFF",
    font=("CiscoSans Bold", 13 * -1),
    width=320
)

window.resizable(False, False)
window.mainloop()
