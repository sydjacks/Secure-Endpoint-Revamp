
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import tkinter as tk
from tkinter import ttk
import tkinter.filedialog as fd
# from Diag_Analyzer_v1_05 import main # Assuming this is the module with the main logic

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"/Users/sydjacks/Secure-Endpoint-Revamp/generated_output/build/assets/frame0")

sample_list = ["Processes"]
def popup_export_file():
    popup = tk.Toplevel(window)
    popup.title("Export Results")
    popup.geometry("400x200")
    label = tk.Label(popup, text="Click below to save your results file.")
    label.pack(pady=20)

    def save_file():
        file_path = fd.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if file_path:
            with open(file_path, "w") as f:
                f.write("Exported results go here!\n")
            tk.Label(popup, text="File saved!", fg="green").pack()

    save_btn = tk.Button(popup, text="Save File", command=save_file)
    save_btn.pack(pady=10)

    close_btn = tk.Button(popup, text="Close", command=popup.destroy)
    close_btn.pack(pady=10)

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def open_popup():
    window.destroy()
    popup = tk.Tk()  # Create a new window (child of root)
    
    popup.title("Pop-Up Window")
    popup.geometry("674x408")

    label = ttk.Label(popup, text="Sample File Explorer Page")
    label.pack(pady=20)

    close_btn = ttk.Button(popup, text="Close", command=popup.destroy)
    close_btn.pack(pady=10)

def get_section_from_summary(subheading, filename="-summary.txt"):
    lines = []
    with open(filename, "r") as f:
        in_section = False
        for line in f:
            if line.strip() == subheading:
                in_section = True
                continue  # Skip the subheading itself
            if in_section:
                # Stop if we hit another subheading (line ending with ':') or a blank line
                if line.strip().endswith(":") and line.strip() != subheading:
                    break
                if line.strip() == "":
                    continue
                lines.append(line.rstrip())
    return lines

# set this to the submit button 
def display_results():
    canvas.create_text(
        260.0, 255.0,  # Coordinates inside the rectangle
        anchor="nw",
        text="\n".join(get_section_from_summary("Processes:")) + "\n\n" +
             "\n".join(get_section_from_summary("Files:")) + "\n\n" +
             "\n".join(get_section_from_summary("Extensions:")) + "\n\n" +
             "\n".join(get_section_from_summary("Paths:")),
        fill="#000000",
        font=("CiscoSansTT", -20)
)

window = Tk()

window.geometry("1090x863")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 863,
    width = 1090,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    60.0,
    207.0,
    1020.0,
    785.0,
    fill="#FFFFFF",
    outline="")

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=display_results,
    relief="flat"
)
button_1.place(
    x=441.0,
    y=796.0,
    width=201.0,
    height=37.0
)

canvas.create_rectangle(
    250.0,
    243.5,
    780.0,
    295.5,
    fill="#FFFFFF",
    outline="")

canvas.create_text(
    249.0,
    137.0,
    anchor="nw",
    text="Diagnostic Analyzer Results",
    fill="#000000",
    font=("CiscoSansTT", 45 * -1)
)

canvas.create_rectangle(
    0.0,
    0.0,
    1090.0,
    112.0,
    fill="#0489BA",
    outline="")

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=open_popup,
    relief="flat"
)
button_2.place(
    x=999.0,
    y=67.58892822265625,
    width=64.6875,
    height=29.210041046142578
)

canvas.create_text(
    13.0,
    18.0,
    anchor="nw",
    text="secure",
    fill="#FFFFFF",
    font=("Jomolhari Regular", -60)  # note: Tkinter expects negative font size
)

# Measure the width of "secure" to correctly position "endpoint"
import tkinter.font as tkFont
font_secure = tkFont.Font(family="Jomolhari Regular", size=60)
width_secure = font_secure.measure("secure")

# Draw "endpoint" with a different font
canvas.create_text(
    13.0 + width_secure,
    18.0,
    anchor="nw",
    text="endpoint",
    fill="#FFFFFF",
    font=("CiscoSans", -60)  # Change to your desired font
)

window.resizable(True, True)
window.mainloop()
